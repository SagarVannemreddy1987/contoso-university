trigger:
    branches:
        include:
            ##- develop
            ##- feature

pool: 
    vmImage: ubuntu-20.04

parameters: 
    - name: environment
      displayName: Environment
      type: string
      default: Dev
      values: 
          - DEV
          - Demo 

variables:
    - group: 
    - template: vars-global.yml
    - ${{ if or (eq(variables['Build.Reason'], 'IndividualCI'), eq(parameters['environemnt'], 'DEV')) }}:
        - template: vars-dev.yml

Stages: 
- stage: Build
  jobs:
  - job: Build
    displayName: Build_MVN
    steps:
    - task: Maven@3
      displayName: Creating package
      inputs: ''
      goals: 

    - task: Docker@2
      displayName: 'Login to ACR'
      inputs: 
        command: login
        containerRegistry: $(ACR_CONNECTION)

    - task: Docker@2
      displayName: 'Build Image'
      inputs: 
        repository: $(POD_NAME)/$(APP_TYPE)/$(APP_NAME)
        command: build
        Dockerfile: Dockerfile
        Tags: |
          $(Build.BuildId)
        buildContext: $(System.DefaultWorkingDirectory)

    - task: Docker@2
      displayName: 'Push to $(Azure_ACR_NAME)'
      inputs: 
        command: push
        repository: $(POD_NAME)/$(APP_TYPE)/$(APP_NAME)
        Tags: |
          $(Build.BuildId)

    - task: Docker@2
      displayName: 'Log out of $(Azure_ACR_NAME)'
      inputs: 
        command: logout
        containerRegistry: $(ACR_CONNECTION)

    - bash: |
         echo "##vso[task.setvariable variable=DOCKER_IMAGE_NAME]$(AZURE_ACR_NAME).azurecr.io/$(POD_NAME)/$(APP_TYPE)/$(APP_NAME)"
      displayName: 'dockerImageVariable'
    - bash: |
         echo "##vso[task.setvariable variable=DOCKER_IMAGE_NAME]$(Build.BuildId)"
      displayName: 'dockerImageVariable'

- stage: Deploy
  dependsOn: Build
  jobs: 
  - deployment:
    timeoutInMinutes: 360
    displayName: Deploy to ${{ parameters.environment}}      
    environment: '${{ parameters.environment }}.namespace' 
    strategy: 
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: quetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: 'Replace tokens in deployment.yaml'
            inputs: 
              rootDirectory: "$(System.DefaultWorkingDirectory)/aks-deployment"
              targetFiles: deployment.yaml

          - task: PublishPipelineArtifact@1
            inputs: 
              targetPath: "$(System.DefaultWorkingDirectory)/aks-deployment"
              artifact: drop
            displayName: Publish Pipeline Artifact

          - task: KubernetesManifest@0
            displayName: deploy
            inputs: 
               namespace: 
               manifests: '$(System.DefaultWorkingDirectory)/aks-deployment/deployment.yaml'




